#!/usr/bin/env python
#----------------------------------------------------------------------------------
# make platform deployment and admin action
#
# v1.0  - initial version - florent.kubiak@orange.com
# v1.1	- combine phase and platform in one param - florent.kubiak@orange.com
# V1.2  - add new usecase : start several playbooks in one makepb start - florent.kubiak@orange.com
# V1.3  - Script can be launched  whatever the current directory - jaouen.legoic@orange.com
# V1.4  - Use .yml extension in makepb argument - florent.kubiak@orange.com
# V1.5  - Add --step option in order to run playbook step by step - florent.kubiak@orange.com
#----------------------------------------------------------------------------------

import argparse
import sys
import os

parser = argparse.ArgumentParser()
parser.add_argument("-pf","--platform", help="Phase and name of your PF,ex : prod/opovo01", required=True)
parser.add_argument("-pt", "--platformtype", help="PlatformeType, can be ovo or ntv")
parser.add_argument("-ht","--host", help="One hostname or group, ex : opovo01cont01 or cpr-app")
parser.add_argument("-t","--tag", help="Specify a specific task to play, ex : orange.eat.cpr.install.T1")
parser.add_argument("-a", "--action", help="Admin action ex : start,stop,restart,status")
parser.add_argument("-r", "--release", help="Release to install/update/rollback, ex : G01R00C00")
parser.add_argument("-s", "--service", help="Service to start/stop/restart, ex : vod")
parser.add_argument("-p", "--package", help="Package tag , ex : oracle_client")
parser.add_argument("-d", "--debug", help="Activate ansible debug mode", action='store_true')
parser.add_argument("--step", help="Activate ansible debug mode", action='store_true')
args, unknown = parser.parse_known_args()

i=0
playbook=""

# Get working directory
exec_directory=os.path.dirname(sys.argv[0])

# Get phase and plateform name from -pf arg
phase=args.platform.split("/")[0]
platform=args.platform.split("/")[1]

# Check if user want to start several playbooks
if "," not in sys.argv[1]:
	# Only one playbook case
	playbook=exec_directory+"/PLAYBOOKS/"+sys.argv[1]+".yml"
else:
	# Several playbook case
	playbook_list=sys.argv[1].split(",")
	playbook_nb=len(playbook_list)
	while i <  playbook_nb:
		playbook = playbook + exec_directory+"/PLAYBOOKS/"+playbook_list[i]+".yml "
		i += 1

# Build basic ansible-playbook commande with playbookname, path to inventory, path to configuration, path to secret file
# path_to=exec_directory+"/CONF/"+phase+"/"+platform
# ansible_cmd="ansible-playbook "+exec_directory+"/PLAYBOOKS/"+playbook+" -i "+path_to+"/inventory -e platform_phase="+phase+" -e platform_name="+platform
path_to=exec_directory+"/CONF/"+phase+"/"+platform
ansible_cmd="ansible-playbook "+playbook+" -i "+path_to+"/inventory -e platform_phase="+phase+" -e platform_name="+platform


# According to the present arguments, add extra variables to the basic ansible_cmd 
if args.host:
	ansible_cmd=ansible_cmd+" -e platform_hosts="+args.host

# We need secrets file for this playbooks
if 'ansible-user' in playbook or 'transfer' in playbook or 'bigip' in playbook:
	ansible_cmd=ansible_cmd+" -e @"+path_to+"/secrets --ask-vault-pass"
# BigIp playbook needs somes extras vars
if 'bigip' in playbook:
	if args.host is None : parser.error("You must specify which host : --host group|hostname")
	if args.action is None : parser.error("You must specify lb action : --action seton|setoff")
	ansible_cmd=ansible_cmd+ " -e lb_action="+args.action
if 'admin' in playbook:
	if args.action is None : parser.error("You must specify admin action : --action start|stop|restart|status")
	ansible_cmd=ansible_cmd+ " -e admin_action="+args.action
if 'rollback' in playbook:
	if args.release is None : parser.error("You must specify target release to rollback : --release G01R00C00")
	ansible_cmd=ansible_cmd+ " -e target_release="+args.release
if 'transfer' in playbook and args.package is not None:
	ansible_cmd=ansible_cmd+ " -e pkgtag="+args.package
if args.tag:
	ansible_cmd=ansible_cmd+" --tags \""+args.tag+"\""
if args.debug:
	ansible_cmd=ansible_cmd+" -vvv"
if args.step:
	ansible_cmd=ansible_cmd+" --step"
	
print(ansible_cmd)
os.system(ansible_cmd)
